// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id              Int              @id       @default(autoincrement())
  image           String?
  name            String
  username        String           @unique
  email           String           @unique
  password        String
  bio             String?
  facebook        String?
  twitter         String?
  github          String?
  post            Posts[]
  likes           Likes[]
  comment         Comments[]
}

model Posts {
  id              Int              @id       @default(autoincrement())
  image           String
  title           String           @unique
  slug            String           @unique  
  content         String           @db.LongText
  date            String
  published       String
  tags            String
  likes           Likes[]
  comment         Comments[]
  user            User?            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId          Int?

  @@index([userId])
}

model Comments {
  id              Int              @id       @default(autoincrement())
  comment         String
  date            String
  post            Posts?           @relation(fields: [postSlug], references: [slug], onDelete: Cascade, onUpdate: Cascade)
  postSlug        String?
  user            User?            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId          Int?

  @@index([userId, postSlug])
}

model Likes {
  id              Int              @id     @default(autoincrement())
  date            String
  post            Posts?           @relation(fields: [postSlug], references: [slug], onDelete: Cascade, onUpdate: Cascade)
  postSlug        String?
  user            User?            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId          Int?

  @@index([userId, postSlug])
}
